cmake_minimum_required(VERSION 3.0.0)
project(monkvg VERSION 0.1.0)

# configuration
option(MKVG_DO_VULKAN_BACKEND "Use Vulkan as the rendering backend.  NOT IMPLEMENTED" OFF) # Not Implemented Yet
option(MKVG_DO_OPENGLES_BACKEND "Use OpenGL ES as the rendering backend." OFF)
option(MKVG_DO_OPENGL_BACKEND "Use OpenGL as the rendering backend." ON)
option(MKVG_DO_GLU_TESSELATION "Use GLU tesselator" ON)
option(MKVG_DO_EXAMPLES "Build examples in the ./examples directory" ON)

if (MKVG_DO_OPENGLES_BACKEND AND MKVG_DO_OPENGL_BACKEND)
    message(FATAL_ERROR "Cannot build both OpenGL and OpenGL ES backends MKVG_DO_OPENGLES_BACKEND: ${MKVG_DO_OPENGLES_BACKEND} MKVG_DO_OPENGL_BACKEND: ${MKVG_DO_OPENGL_BACKEND}" )
endif()

# C++ 20
set(CMAKE_CXX_STANDARD 20)

# require PkgConfig
find_package(PkgConfig REQUIRED)

# External Project Handler
include(build_external_proj.cmake)

## GLU Tesselation
if(MKVG_DO_GLU_TESSELATION)
    add_subdirectory(thirdparty/glu)
    set(GLU_LIBRARIES glu_tess glu_util)
    set(GLU_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/glu/include)
    message(STATUS "GLU Tesselation Enabled")
    message(STATUS "GLU_INCLUDE_DIRS: ${GLU_INCLUDE_DIRS}")
    message(STATUS "GLU_LIBRARIES: ${GLU_LIBRARIES}")
endif()


## OpenGL ES
if(MKVG_DO_OPENGLES_BACKEND)
    find_package(OpenGL REQUIRED)

    set(BACKEND_SOURCE ${BACKEND_SOURCE}
        ./src/opengl_es/glesBatch.cpp
        ./src/opengl_es/glesContext.cpp
        ./src/opengl_es/glesFont.cpp
        ./src/opengl_es/glesImage.cpp
        ./src/opengl_es/glesPaint.cpp
        ./src/opengl_es/glesPath.cpp)
    set(BACKEND_INCLUDE ${BACKEND_INCLUDE}
        ./src/opengl_es
        ${GLU_INCLUDE_DIRS}
        ./thirdparty/gles2-bc/Sources/OpenGLES
        ./thirdparty/gles2-bc/Sources/OpenGLES/OpenGLES11
        ./thirdparty/gles2-bc/Sources/OpenGLES/OpenGLES20)    

    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/gles2-bc)
    set(MNKVG_DEPENDENCIES ${DMNKVG_EPENDENCIES} gles2-bc)
    set(MNKVG_LIBRARIES ${MNKVG_LIBRARIES} gles2-bc)
    set(MNKVG_COMPILE_DEFS ${MNKVG_COMPILE_DEFS} MNKVG_GLES_BACKEND)

    
endif()

## OpenGL Backend
if(MKVG_DO_OPENGL_BACKEND)
    find_package(OpenGL REQUIRED)
    find_package(glm REQUIRED)
    if (APPLE)
        # for whatever reason apple requires explicit include path
        set(GLM_INCLUDE_DIRS ${GLM_INCLUDE_DIRS} /opt/homebrew/include)
    endif(APPLE)


    set(BACKEND_SOURCE ${BACKEND_SOURCE}
        ./src/opengl/glBatch.cpp
        ./src/opengl/glContext.cpp
        ./src/opengl/glFont.cpp
        ./src/opengl/glImage.cpp
        ./src/opengl/glPaint.cpp
        ./src/opengl/glPath.cpp
        ./src/opengl/glShader.cpp)
    set(BACKEND_INCLUDE ${BACKEND_INCLUDE}
        ./src/opengl
        ${GLU_INCLUDE_DIRS}
        ${GLM_INCLUDE_DIRS})

    set(MNKVG_COMPILE_DEFS ${MNKVG_COMPILE_DEFS} MNKVG_GL_BACKEND)

    # build shaders to header
    # Function to embed GLSL shader into a C++ header file
    function(embed_glsl_shader SHADER_FILE HEADER_FILE)
        # Read the GLSL file and escape the double quotes and backslashes
        file(READ ${SHADER_FILE} SHADER_SOURCE)
        string(REPLACE "\"" "\\\"" SHADER_SOURCE "${SHADER_SOURCE}")
        string(REPLACE "\\" "\\\\" SHADER_SOURCE "${SHADER_SOURCE}")

        get_filename_component(SHADER_NAME ${SHADER_FILE} NAME_WE)

        # Write the GLSL source as a C++ string into the header file
        file(WRITE ${HEADER_FILE} "#pragma once\n")
        file(APPEND ${HEADER_FILE} "/* DO NOT EDIT!  AUTOGENERATED BY CMAKE*/\n")
        file(APPEND ${HEADER_FILE} "const char* ${SHADER_NAME} = R\"(\n${SHADER_SOURCE}\n)\";\n")
    endfunction()

    
    # build the shaders
    # set(SHADER_FILES 
    #     ./src/opengl/shaders/color_vert.glsl 
    #     ./src/opengl/shaders/color_frag.glsl)

    # foreach(SHADER_FILE ${SHADER_FILES})
    #     get_filename_component(SHADER_NAME ${SHADER_FILE} NAME_WE)
    #     get_filename_component(SHADER_DIR ${SHADER_FILE} DIRECTORY)

    #     set(HEADER_FILE "${SHADER_DIR}/${SHADER_NAME}.h")
    #     embed_glsl_shader(${SHADER_FILE} ${HEADER_FILE})
    #     list(APPEND GENERATED_HEADERS ${HEADER_FILE})

    #     # Add a custom command to rebuild the shader header when the shader file changes
    #     # add_custom_command(
    #     #     OUTPUT ${HEADER_FILE}
    #     #     COMMAND ${CMAKE_COMMAND} -E copy_if_different ${SHADER_FILE} ${HEADER_FILE}
    #     #     DEPENDS ${SHADER_FILE}
    #     #     COMMENT "Copying ${SHADER_FILE} to ${HEADER_FILE}"
    #     # )
    # endforeach()

    # # Add a custom target to build the shaders
    # add_custom_target(build_shaders DEPENDS ${GENERATED_HEADERS})

    # set(MNKVG_DEPENDENCIES ${MNKVG_DEPENDENCIES} ${GLU_LIBRARIES} build_shaders)


endif()

## setup common source 
set(COMMON_SOURCE ${COMMON_SOURCE}
    ./src/mkBaseObject.cpp
    ./src/mkBatch.cpp
    ./src/mkContext.cpp
    ./src/mkFont.cpp
    ./src/mkImage.cpp
    ./src/mkMath.cpp
    ./src/mkPaint.cpp
    ./src/mkParameter.cpp
    ./src/mkPath.cpp
    ./src/mkVGU.cpp
)
set(COMMON_INCLUDE ${COMMON_INCLUDE} ${CMAKE_CURRENT_SOURCE_DIR}/src)


## Build the MonkVG library
message(STATUS "BACKEND_INCLUDE: ${BACKEND_INCLUDE}")
add_library(monkvg ${COMMON_SOURCE} ${BACKEND_SOURCE})
add_dependencies(monkvg ${GLU_LIBRARIES} ${MNKVG_DEPENDENCIES})
target_compile_definitions(monkvg PRIVATE ${MNKVG_COMPILE_DEFS})
target_include_directories(monkvg 
                            PUBLIC 
                            ${CMAKE_CURRENT_SOURCE_DIR}/include 
                            PRIVATE 
                            ${COMMON_INCLUDE} 
                            ${BACKEND_INCLUDE})
target_link_libraries(monkvg ${GLU_LIBRARIES} ${MNKVG_LIBRARIES})



if (MKVG_DO_EXAMPLES)
    ## Build Examples

    include(ExternalProject)

    # Platform Specific  librarys like GLX on Linux
    set(PLATFORM_LIBS )
    if (${CMAKE_SYSTEM_NAME} MATCHES Linux)
        set(PLATFORM_LIBS ${PLATFORM_LIBS} OpenGL::GLX)
        find_package(glfw3 REQUIRED)

    endif()



    if (APPLE)
        find_package(glfw3 3.4 REQUIRED)
 
        # M1s have an issue with GLFW includes.  See: https://stackoverflow.com/questions/67373307/macos-m1-fatal-error-glfw-glfw3-h-file-not-found
        set(PLATFORM_LIBS ${PLATFORM_LIBS} "-framework Cocoa" "-framework OpenGL" "-framework IOKit")
        set(GLM_INCLUDE_DIRS ${GLM_INCLUDE_DIRS} /opt/homebrew/include)
    endif(APPLE)

    
    
    # GLFW Hello World
    add_executable(glfw_hello_world examples/glfw_hello_world.cpp)
    add_dependencies(glfw_hello_world monkvg)
    target_include_directories(glfw_hello_world 
                                PRIVATE 
                                ${CMAKE_CURRENT_SOURCE_DIR}/include/MonkVG
                                ${GLM_INCLUDE_DIRS}
                                ${GLFW_INCLUDE_DIRS}                                
                                )
    target_link_libraries(glfw_hello_world  PUBLIC
                            monkvg
                            ${GLU_LIBRARIES} # Required by MonkVG
                            glfw   
                            OpenGL::GL
                            ${PLATFORM_LIBS}
                            ${CMAKE_DL_LIBS}
                            pthread
                            )

    # Tiger
    add_executable(tiger examples/tiger.cpp examples/tiger_paths.c)
    add_dependencies(tiger monkvg)
    target_include_directories(tiger 
                                PRIVATE 
                                ${CMAKE_CURRENT_SOURCE_DIR}/.
                                ${CMAKE_CURRENT_SOURCE_DIR}/include/MonkVG
                                ${GLM_INCLUDE_DIRS}
                                ${GLFW_INCLUDE_DIRS}
                                )
    target_link_libraries(tiger  PUBLIC
                            monkvg
                            ${GLU_LIBRARIES} # Required by MonkVG
                            glfw   
                            OpenGL::GL
                            ${PLATFORM_LIBS}
                            ${CMAKE_DL_LIBS}
                            pthread
                            )


endif()

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
